{"version":3,"sources":["components/Navbar.js","components/pages/Home.js","components/pages/About.js","components/pages/Sandbox.js","components/pages/sandboxPages/Sorting.js","App.js","index.js"],"names":["refreshPage","pathName","window","location","pathname","reload","assign","Navbar","className","to","onClick","Home","id","src","alt","About","Sandbox","reloadPage","Sorting","sortedLevels","useMemo","speedLevels","animationType","useState","sortedLevelIndex","setSortedLevelIndex","speedLevelIndex","setSpeedLevelIndex","arrayLength","setArrayLength","ms","setMs","bars","setBars","resetArray","min","max","array","indexArray","i","push","Math","random","randomIndex","currentIndex","length","floor","shuffle","swapBarHeights","indexOne","indexTwo","indexOneHeight","mergeSort","leftIndex","rightIndex","animations","middleIndex","leftPacket","rightPacket","leftSortedArray","rightSortedArray","leftStart","rightStart","mergedArray","leftPointer","rightPointer","merge","slice","quickSort","pivotIndex","pivotValue","animateSort","buttons","document","getElementsByClassName","resetLevelButtons","sliders","disabled","setTimeout","disableButtonsWhenSort","barsScraped","animation","i_ind","j_ind","style","backgroundColor","new_i_height","new_j_height","height","console","log","useEffect","map","value","idx","min_j_ind","min_j","j","sortedPacket","step","onChange","e","target","milli","speedIndex","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2ab59102.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Navbar.css'\n\nfunction Navbar() {\n    return (\n        <div className=\"navbar\">\n            <div className=\"logo\">\n                Enriko Chavez\n            </div>\n            <div className=\"rerouters\">\n                <Link className=\"nav-button-wrapper\" to=\"/\" onClick={() => {refreshPage(\"/\")}}>\n                    <div className=\"nav-button\">Home</div>\n                </Link>\n                <Link className=\"nav-button-wrapper\" to=\"/about\" onClick={() => {refreshPage(\"/about\")}}>\n                    <div className=\"nav-button\">About</div>\n                </Link>\n                <Link className=\"nav-button-wrapper\" to=\"/sandbox\" onClick={() => {refreshPage(\"/sandbox\")}}>\n                    <div className=\"nav-button\">Sandbox</div>\n                </Link>\n            </div>\n            <div className=\"padding\"/>\n        </div>\n    )\n}\n\n//hacky way of stopping sort from running if user leaves sort page before sort is over\nfunction refreshPage(pathName){\n    if (window.location.pathname === \"/sorting\"){\n        window.location.reload(false);\n        window.location.assign(pathName)\n    }\n}\n\nexport default Navbar\n","import React from 'react'\nimport './Home.css';\n\nfunction Home() {\n    return (\n        <div className=\"home\">\n            <div className=\"padding\" id=\"top\"/>\n            <div className=\"home-bar\">\n                <img className=\"profile-picture\" src=\"/images/Enriko.jpg\" alt=\"\"/>\n                <div className=\"info-box\">\n                    <div className=\"stuff\">hello! this is my personal sandbox website. I'll be using this site to explore my techy curiosity</div>\n                </div>\n            </div>\n            <div className=\"padding\" id=\"bottom\"/>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport './About.css'\n\nfunction About() {\n    return (\n        <div className=\"home\">\n            <div className=\"padding\" id=\"top\"/>\n            <div className=\"about-blob\">\n                I am an Electrical Engineering and Computer Science graduate from MIT. Originally a physics major, I've enjoyed spending time learning about the world around me in detail, and how it came to be. My goal is to contribute in a creative and informed way in anything I do. Currently, I spend my days developing distributed systems.\n            </div>\n            <div className=\"about-blob\">\n                This website is reactive! \n            </div>   \n            <div className=\"padding\" id=\"bottom\"/>\n        </div>\n    )\n}\n\nexport default About\n","import React from 'react'\nimport './Sandbox.css'\nimport { Link } from 'react-router-dom'\n\nfunction Sandbox() {\n    return (\n        <div className=\"sandbox\">\n            <div className=\"title\">\n                sandbox projects\n            </div>\n            <div className=\"project-list\">\n                <Link className=\"nav-button-wrapper\" to=\"/sorting\">\n                    <div className=\"nav-button\">sorting</div>\n                </Link>\n            </div>\n            <div className=\"padding\"/>\n        </div>\n    )\n}\n\nexport default Sandbox","import React, { useState, useEffect, useMemo } from 'react'\nimport './Sorting.css'\nimport {RangeStepInput} from 'react-range-step-input';\n\nfunction Sorting() {\n\n    //constructor\n    const BAR_MAX = 100\n    const BAR_MIN = 5\n    const ARRAY_MAX_SIZE = 200\n    const ARRAY_MIN_SIZE = 2\n\n    const sortedLevels = useMemo(()=>[1,2,5,10], []) //0, 50, 80, 90% sorted arrays (calculated like: 100 - 100/1, 100 - 100/2, etc..)\n    const speedLevels = [0, 1, 2, 5, 10, 50, 100, 400] //0 ms between animations, 1 ms, 2 ms, etc..\n\n    const animationType = {\n        COMPARISON: \"comparison\",\n        SWAP: \"swap\",\n        SINGLE_CHANGE: \"single_change\"\n    }\n\n    const [sortedLevelIndex, setSortedLevelIndex] = useState(0)\n    const [speedLevelIndex, setSpeedLevelIndex] = useState(2)\n    const [arrayLength, setArrayLength] = useState(32)\n    const [ms, setMs] = useState(speedLevels[speedLevelIndex])\n    const [bars, setBars] = useState([])\n\n    useEffect(resetArray, [arrayLength, sortedLevelIndex, sortedLevels])\n\n    //creates a new random array\n    function resetArray(){\n        let array = []\n        let indexArray = []\n        for (let i = 0; i < arrayLength; i++){\n            array.push((BAR_MAX - BAR_MIN)/arrayLength * i + BAR_MIN + Math.random()*0.5)\n            indexArray.push(i)\n        }\n        indexArray = shuffle(indexArray)\n        for (let i = 0; i < arrayLength/sortedLevels[sortedLevelIndex]; i++){\n            array[indexArray[i]] = randomInt(BAR_MIN, BAR_MAX)\n        }\n        setBars(array)\n    }\n\n    function swapBarHeights(indexOne, indexTwo, array){ //use it on any swaps, TODO\n        const indexOneHeight = array[indexOne]\n        array[indexOne] = array[indexTwo]\n        array[indexTwo] = indexOneHeight\n    }\n\n    function selectionSort(){\n        let animations = []\n        for (let i = 0; i < arrayLength - 1; i++){\n            let min_j_ind = i\n            let min_j = bars[i]\n            for (let j = i + 1; j < arrayLength; j++){\n                animations.push([animationType.COMPARISON, min_j_ind, j])\n                if (min_j > bars[j]){ //found smaller bar\n                    min_j = bars[j]\n                    min_j_ind = j\n                }\n            }\n            if (min_j_ind !== i){ //smaller bar than ith bar found to the right of ith bar\n                swapBarHeights(min_j_ind, i, bars)\n                animations.push([animationType.SWAP, i, min_j_ind, bars[i], bars[min_j_ind]])\n            }\n        }\n        animateSort(animations)\n    }\n\n    function insertionSort(){\n        let animations = []\n        for (let i = 1; i < arrayLength; i++){\n            let rightIndex = i\n            let leftIndex = rightIndex - 1\n            while (leftIndex >= 0){\n                animations.push([animationType.COMPARISON, leftIndex, rightIndex])\n                if (bars[rightIndex] < bars[leftIndex]){\n                    //swap bars heights\n                    swapBarHeights(leftIndex, rightIndex, bars)\n                    animations.push([animationType.SWAP, leftIndex, rightIndex, bars[leftIndex], bars[rightIndex]])\n                    //compare the two bars lower on height\n                    rightIndex = leftIndex\n                    leftIndex = leftIndex - 1   \n                }\n                else{\n                    break\n                }\n            }\n        }\n        animateSort(animations)\n    }\n\n    function mergeSortStarter(){\n        let animations = []\n        const array = bars\n        const leftIndex = 0\n        const rightIndex = array.length - 1\n        const sortedPacket = mergeSort(leftIndex, rightIndex, array, animations)\n        for (let i = 0; i < arrayLength; i++){\n            bars[i] = sortedPacket[0][i]\n        }\n        animateSort(animations)\n    }\n\n    function mergeSort(leftIndex, rightIndex, array, animations){\n        if (leftIndex === rightIndex){\n            return [[array[0]], leftIndex] //tuple of array, and index of where subarray starts\n        }\n        const middleIndex = (leftIndex + rightIndex) >>> 1\n        const leftPacket = mergeSort(leftIndex, middleIndex, array.slice(0, (middleIndex - leftIndex) + 1), animations)\n        const rightPacket = mergeSort(middleIndex + 1, rightIndex, array.slice((middleIndex - leftIndex) + 1), animations)\n        const sortedArray = merge(leftPacket, rightPacket, animations)\n        return [sortedArray, leftIndex]\n    }\n\n    function merge(leftPacket, rightPacket, animations){\n        const leftSortedArray = leftPacket[0]\n        const rightSortedArray = rightPacket[0]\n        const leftStart = leftPacket[1]\n        const rightStart = rightPacket[1]\n\n        let mergedArray = []\n        let leftPointer = 0\n        let rightPointer = 0\n        while (leftPointer < leftSortedArray.length && rightPointer < rightSortedArray.length){\n            animations.push([animationType.COMPARISON, leftStart + leftPointer, rightStart + rightPointer])\n            if(leftSortedArray[leftPointer] <= rightSortedArray[rightPointer]){\n                mergedArray.push(leftSortedArray[leftPointer])\n                animations.push([animationType.SINGLE_CHANGE, leftStart + mergedArray.length - 1, leftSortedArray[leftPointer]])\n                leftPointer++\n            }\n            else{ // bars[leftPointer] > bars[rightPointer]\n                mergedArray.push(rightSortedArray[rightPointer])\n                animations.push([animationType.SINGLE_CHANGE, leftStart + mergedArray.length - 1, rightSortedArray[rightPointer]])\n                rightPointer++\n            }\n        }\n        while (leftPointer < leftSortedArray.length){\n            mergedArray.push(leftSortedArray[leftPointer])\n            animations.push([animationType.SINGLE_CHANGE, leftStart + mergedArray.length - 1, leftSortedArray[leftPointer]])\n            leftPointer++\n        }\n        while (rightPointer < rightSortedArray.length){\n            mergedArray.push(rightSortedArray[rightPointer])\n            animations.push([animationType.SINGLE_CHANGE, leftStart + mergedArray.length - 1, rightSortedArray[rightPointer]])\n            rightPointer++\n        }\n        return mergedArray\n    }\n\n    function bubbleSort(){\n        let animations = []\n        for (let i = 0; i < arrayLength - 1; i++){\n            for (let j = 0; j < arrayLength - 1 - i; j++){\n                animations.push([animationType.COMPARISON, j, j + 1])\n                if (bars[j] > bars[j+1]){\n                    swapBarHeights(j, j+1, bars)\n                    animations.push([animationType.SWAP, j, j + 1, bars[j], bars[j+1]])\n                }\n            }\n        }\n        animateSort(animations)\n    }\n\n    function quickSortStarter(){\n        let animations = []\n        quickSort(0, arrayLength - 1, bars, animations)\n        animateSort(animations)\n    }\n\n    function quickSort(leftIndex, rightIndex, array, animations){\n        //base case, partition is 1 element or less\n        if (rightIndex - leftIndex <= 0){\n            return\n        }\n        //picking pivot, and placing it on the right of the array (just rightmost value for now)\n        const pivotIndex = rightIndex\n        const pivotValue = array[pivotIndex]\n        let leftPointer = leftIndex\n        let rightPointer = rightIndex - 1\n\n        //place bars left or right of pivot value\n        while (true){\n            while (array[leftPointer] < pivotValue){\n                animations.push([animationType.COMPARISON, leftPointer, pivotIndex])\n                leftPointer++\n            }\n            animations.push([animationType.COMPARISON, leftPointer, pivotIndex])\n            while (array[rightPointer] > pivotValue && rightPointer > leftPointer){\n                animations.push([animationType.COMPARISON, rightPointer, pivotIndex])\n                rightPointer--\n            }\n            animations.push([animationType.COMPARISON, rightPointer, pivotIndex])\n            if (leftPointer >= rightPointer) break\n            swapBarHeights(leftPointer, rightPointer, array)\n            animations.push([animationType.SWAP, leftPointer, rightPointer, bars[leftPointer], bars[rightPointer]])\n            leftPointer++\n            rightPointer--\n        }\n        //place pivot value where it's supposed to be\n        swapBarHeights(leftPointer, pivotIndex, array)\n        animations.push([animationType.SWAP, leftPointer, pivotIndex, bars[leftPointer], bars[pivotIndex]])\n\n        //sort the two smaller sides\n        quickSort(leftIndex, leftPointer - 1, array, animations)\n        quickSort(leftPointer + 1, rightIndex, array, animations)\n    }\n\n    function animateSort(animations){\n        disableButtonsWhenSort(animations)\n        const barsScraped = document.getElementsByClassName(\"single-bar\")\n        for (let i = 0; i < animations.length; i++){  \n            const animation = animations[i]\n            const type = animation[0]\n            switch (type){\n                case animationType.COMPARISON:{\n                    const i_ind = animation[1] \n                    const j_ind = animation[2]\n                    setTimeout(() => {\n                        barsScraped[i_ind].style.backgroundColor = 'turquoise'\n                        barsScraped[j_ind].style.backgroundColor = 'turquoise'                   \n                    }, i * (ms))\n                    setTimeout(() => {\n                        barsScraped[i_ind].style.backgroundColor = 'red'\n                        barsScraped[j_ind].style.backgroundColor = 'red'                  \n                    }, (i + 1) * (ms))\n                    break\n                }\n                case animationType.SWAP:{\n                    const i_ind = animation[1] \n                    const j_ind = animation[2]\n                    const new_i_height = animation[3]\n                    const new_j_height = animation[4]\n                    setTimeout(() => {\n                        barsScraped[i_ind].style.backgroundColor = 'lightgreen'\n                        barsScraped[j_ind].style.backgroundColor = 'lightgreen'\n                        barsScraped[i_ind].style.height = `${new_i_height}%`\n                        barsScraped[j_ind].style.height = `${new_j_height}%`\n                    }, i * (ms))\n                    setTimeout(() => {\n                        barsScraped[i_ind].style.backgroundColor = 'red'\n                        barsScraped[j_ind].style.backgroundColor = 'red'\n                    }, (i + 1) * (ms))\n                    break\n                }\n                case animationType.SINGLE_CHANGE:{\n                    const i_ind = animation[1]\n                    const new_i_height = animation[2]\n                    setTimeout(() => {\n                        barsScraped[i_ind].style.backgroundColor = 'lightgreen'\n                        barsScraped[i_ind].style.height = `${new_i_height}%`\n                    }, i * (ms))\n                    setTimeout(() => {\n                        barsScraped[i_ind].style.backgroundColor = 'red'\n                    }, (i + 1) * (ms))\n                    break\n                }\n                default:{\n                    console.log(\"ERROR IN ANIMATION\")\n                    break\n                }\n            }\n        }\n    }\n\n    function disableButtonsWhenSort(animations){\n        const buttons = document.getElementsByClassName(\"button\")\n        const resetLevelButtons = document.getElementsByClassName(\"reset-level-button\")\n        const sliders = document.getElementsByClassName(\"slider\")\n        for (let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = true\n        }\n        resetLevelButtons[0].disabled = true\n        resetLevelButtons[1].disabled = true\n        sliders[0].disabled = true\n        sliders[1].disabled = true\n        setTimeout(() => {\n            for (let i = 0; i < buttons.length; i++){\n                buttons[i].disabled = false\n            }\n            resetLevelButtons[0].disabled = false\n            resetLevelButtons[1].disabled = false\n            sliders[0].disabled = false\n            sliders[1].disabled = false\n        }, (animations.length) * (ms) + 10)\n    }\n\n    //for changing array size\n    function onLengthChange(length){\n        setArrayLength(length)\n    }\n\n    //for changing sort speed\n    function onMsChange(milli, speedIndex){\n        setMs(milli)\n        setSpeedLevelIndex(speedIndex)\n    }\n\n    //for lowering sort percentage\n    function lowerLevel(){\n        if (sortedLevelIndex !== 0){\n            setSortedLevelIndex(sortedLevelIndex - 1)\n        }\n    }\n\n    //for increasing sort percentage\n    function higherLevel(){\n        if (sortedLevelIndex !== (sortedLevels.length - 1)){\n            setSortedLevelIndex(sortedLevelIndex + 1)\n        }\n    }\n\n    return (\n        <div className=\"sorting-page\">\n            <div className=\"all-bars\">\n                {bars.map((value, idx) => (\n                    <div className=\"single-bar\" key={idx} style={{height: `${value}%`}}></div>\n                ))}\n            </div>\n            <div className=\"button-list\">\n                <div className=\"reset-area\">\n                    <div className=\"sorted-levels\">\n                        <button className=\"reset-level-button\" onClick={lowerLevel}>\n                        -\n                        </button>\n                        <button className=\"button\" id=\"reset-button\" onClick={resetArray}>reset<br/>array</button>\n                        <button className=\"reset-level-button\" onClick={higherLevel}>\n                        +\n                        </button>\n                    </div>\n                    <div className=\"sorted-text\">sorted {100 * (1 - 1/sortedLevels[sortedLevelIndex])}%</div>\n                    <button className=\"cancel-button\" onClick={reloadPage}>cancel long sort<br/>(refresh page)</button>\n                </div>\n                <button className=\"button\" onClick={selectionSort}>selection sort</button>\n                <button className=\"button\" onClick={insertionSort}>insertion sort</button>\n                <button className=\"button\" onClick={mergeSortStarter}>merge sort</button>\n                <button className=\"button\" onClick={bubbleSort}>bubble sort</button>\n                <button className=\"button\" onClick={quickSortStarter}>quick sort</button>\n                <div className=\"slider-box\">\n                    <div className=\"slider-text\">array size: {arrayLength}</div>\n                    <RangeStepInput className=\"slider\" min={ARRAY_MIN_SIZE} max={ARRAY_MAX_SIZE} \n                        value={arrayLength} step={1} onChange={e => onLengthChange(e.target.value)}/>\n                </div>\n                <div className=\"slider-box\">\n                    <div className=\"slider-text\">millisecs between animations: {ms}</div>\n                    <RangeStepInput className=\"slider\" min={0} max={speedLevels.length - 1} \n                        value={speedLevelIndex} step={1} onChange={\n                            e => onMsChange(speedLevels[e.target.value], e.target.value)}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction reloadPage(){\n    window.location.reload(false);\n}\n\nfunction randomInt(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\nexport default Sorting","import React from 'react'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport './App.css'\nimport Navbar from './components/Navbar'\nimport Home from './components/pages/Home'\nimport About from './components/pages/About'\nimport Sandbox from './components/pages/Sandbox'\nimport Sorting from './components/pages/sandboxPages/Sorting'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n\n          <Navbar className='navbar'/>\n\n          <div className='pages'>\n          <Switch>\n            <Route path='/' exact component={Home}/>\n            <Route path='/about' exact component={About}/>\n            <Route path='/sandbox' exact component={Sandbox}/>\n            <Route path='/sorting' exact component={Sorting}/>\n          </Switch>\n          </div>\n\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}